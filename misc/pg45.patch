(*
 * Copyright (C) 2018 Hideyuki Kawabata
 *
 * A patchfile for Proof General 4.4.1~pre,
 * which is required to apply when you use Traf
 * with Coq version 8.7 or 8.8.
 *
 * This file is part of "traf".
 *)

diff -c generic-orig/proof-script.el generic/proof-script.el
*** generic-orig/proof-script.el	2018-05-13 15:43:28.000000000 +0900
--- generic/proof-script.el	2018-06-17 19:21:31.000000000 +0900
***************
*** 1685,1691 ****
  	    (setq cmdseen t)
  	    (setq seg (list
  		       'cmd
! 		       (buffer-substring-no-properties realstart (point))
  		       (point))))
  	   ((null type))		; nothing left in buffer
  	   (t
--- 1685,1695 ----
  	    (setq cmdseen t)
  	    (setq seg (list
  		       'cmd
! 		       (let ((str (buffer-substring-no-properties
! 		       		   realstart (point))))
! 			 (let ((pos (string-match "^Proof *\\." str)))
! 			   (if (and pos (= pos 0))
! 			       "Show. (* as a replacement of Proof. *)" str)))
  		       (point))))
  	   ((null type))		; nothing left in buffer
  	   (t
diff -c generic-orig/proof-site.el generic/proof-site.el
*** generic-orig/proof-site.el	2018-05-13 16:02:27.000000000 +0900
--- generic/proof-site.el	2018-05-13 16:01:58.000000000 +0900
***************
*** 80,86 ****
  
  (eval-and-compile
    ;; WARNING: do not edit next line (constant is edited in Makefile.devel)
!   (defconst proof-general-version "Proof General Version 4.5-git."
      "Version string identifying Proof General release."))
  
  (defconst proof-general-short-version
--- 80,87 ----
  
  (eval-and-compile
    ;; WARNING: do not edit next line (constant is edited in Makefile.devel)
! ;  (defconst proof-general-version "Proof General Version 4.5-git."
!   (defconst proof-general-version "Proof General Version 4.5-git + traf-patch-20210123."
      "Version string identifying Proof General release."))
  
  (defconst proof-general-short-version
diff -c generic-orig/proof-tree.el generic/proof-tree.el
*** generic-orig/proof-tree.el	2018-05-12 15:05:38.000000000 +0900
--- generic/proof-tree.el	2018-05-12 15:05:21.000000000 +0900
***************
*** 866,872 ****
  	    (when var-goal-assoc
  	      (dolist (sequent-id (cdr var-goal-assoc))
  		(let ((show-cmd
! 		       (funcall proof-tree-show-sequent-command sequent-id)))
  		  (if show-cmd
  		      (setq proof-action-list
  			    (cons (proof-shell-action-list-item
--- 866,872 ----
  	    (when var-goal-assoc
  	      (dolist (sequent-id (cdr var-goal-assoc))
  		(let ((show-cmd
! 		       (funcall proof-tree-show-sequent-command sequent-id "")))
  		  (if show-cmd
  		      (setq proof-action-list
  			    (cons (proof-shell-action-list-item
***************
*** 925,931 ****
  	(goto-char start)
  	(while (proof-re-search-forward proof-tree-additional-subgoal-ID-regexp
  					end t)
! 	  (let ((other-id (match-string-no-properties 1)))
  	    (setq additional-goal-ids (cons other-id additional-goal-ids))))
  	(setq additional-goal-ids (nreverse additional-goal-ids))
  	(list sequent-id sequent-text additional-goal-ids))
--- 925,931 ----
  	(goto-char start)
  	(while (proof-re-search-forward proof-tree-additional-subgoal-ID-regexp
  					end t)
! 	  (let ((other-id (match-string-no-properties 2)))
  	    (setq additional-goal-ids (cons other-id additional-goal-ids))))
  	(setq additional-goal-ids (nreverse additional-goal-ids))
  	(list sequent-id sequent-text additional-goal-ids))
***************
*** 1128,1135 ****
  	       (proof-name (cadr proof-info)))
  	  (goto-char start)
  	  (if (proof-re-search-forward proof-tree-update-goal-regexp end t)
! 	      (let ((sequent-id (match-string-no-properties 1))
! 		    (sequent-text (match-string-no-properties 2)))
  		(proof-tree-send-update-sequent
  		 proof-state proof-name sequent-id sequent-text)
  		;; put current sequent into hash (if it is not there yet)
--- 1128,1135 ----
  	       (proof-name (cadr proof-info)))
  	  (goto-char start)
  	  (if (proof-re-search-forward proof-tree-update-goal-regexp end t)
! 	      (let ((sequent-id (match-string-no-properties 2))
! 		    (sequent-text (match-string-no-properties 3)))
  		(proof-tree-send-update-sequent
  		 proof-state proof-name sequent-id sequent-text)
  		;; put current sequent into hash (if it is not there yet)
diff -c coq-orig/coq.el coq/coq.el
*** coq-orig/coq.el	2018-05-12 15:05:57.000000000 +0900
--- coq/coq.el	2018-06-08 17:13:53.000000000 +0900
***************
*** 182,191 ****
  ;; as superfluous node in the proof tree. Note that we cannot ignore Proof,
  ;; because, Fixpoint does not display the proof goal, see Coq bug #2776. 
  (defcustom coq-proof-tree-ignored-commands-regexp
    (concat "^\\(\\(Show\\)\\|\\(Locate\\)\\|"
!           "\\(Theorem\\)\\|\\(Lemma\\)\\|\\(Remark\\)\\|\\(Fact\\)\\|"
!           "\\(Corollary\\)\\|\\(Proposition\\)\\|\\(Definition\\)\\|"
!           "\\(Let\\)\\|\\(Fixpoint\\)\\|\\(CoFixpoint\\)\\)")
    "Regexp for `proof-tree-ignored-commands-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
--- 182,194 ----
  ;; as superfluous node in the proof tree. Note that we cannot ignore Proof,
  ;; because, Fixpoint does not display the proof goal, see Coq bug #2776. 
  (defcustom coq-proof-tree-ignored-commands-regexp
+ ;; ;  (concat "^\\(\\(Show\\)\\|\\(Locate\\)\\|"
+ ;;   (concat "^\\(\\(Locate\\)\\|"
+ ;;           "\\(Theorem\\)\\|\\(Lemma\\)\\|\\(Remark\\)\\|\\(Fact\\)\\|"
+ ;;           "\\(Corollary\\)\\|\\(Proposition\\)\\|\\(Definition\\)\\|"
+ ;;           "\\(Let\\)\\|\\(Fixpoint\\)\\|\\(CoFixpoint\\)\\)")
    (concat "^\\(\\(Show\\)\\|\\(Locate\\)\\|"
!           "\\(Fixpoint\\)\\|\\(CoFixpoint\\)\\)")
    "Regexp for `proof-tree-ignored-commands-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
***************
*** 205,211 ****
    :group 'coq-proof-tree)
  
  (defcustom coq-proof-tree-new-layer-command-regexp
!   "^\\(\\(Proof\\)\\|\\(Grab Existential Variables\\)\\)"
    "Regexp for `proof-tree-new-layer-command-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
--- 208,215 ----
    :group 'coq-proof-tree)
  
  (defcustom coq-proof-tree-new-layer-command-regexp
! ;  "^\\(\\(Proof\\)\\|\\(Grab Existential Variables\\)\\)"
!   "^\\(\\(Proof\\)\\|\\(Grab Existential Variables\\)\\)\\|\\(Unshelve\\)"
    "Regexp for `proof-tree-new-layer-command-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
***************
*** 220,233 ****
    :group 'coq-proof-tree)
  
  (defcustom coq-proof-tree-update-goal-regexp
!   (concat "^goal / evar \\([0-9]+\\) is:\n"
            "\\s-*\n\\(\\(?:.+\n\\)*\\)\\(?:\n\\|$\\)")
    "Regexp for `proof-tree-update-goal-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
  
  (defcustom coq-proof-tree-additional-subgoal-ID-regexp
!   "^\\(?:sub\\)?goal [0-9]+ (ID \\([0-9]+\\)) is:"
    "Regexp for `proof-tree-additional-subgoal-ID-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
--- 224,238 ----
    :group 'coq-proof-tree)
  
  (defcustom coq-proof-tree-update-goal-regexp
! ;  (concat "^goal / evar \\([0-9]+\\) is:\n"
!   (concat "^subgoal \\([0-9]+\\) (ID \\([0-9]+\\)) is:\n"
            "\\s-*\n\\(\\(?:.+\n\\)*\\)\\(?:\n\\|$\\)")
    "Regexp for `proof-tree-update-goal-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
  
  (defcustom coq-proof-tree-additional-subgoal-ID-regexp
!   "^subgoal \\([0-9]+\\) (ID \\([0-9]+\\)) is:"
    "Regexp for `proof-tree-additional-subgoal-ID-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
***************
*** 244,250 ****
    :group 'coq-proof-tree)
  
  (defcustom coq-proof-tree-existentials-state-start-regexp
!   "^(dependent evars:"
    "Coq instance of `proof-tree-existentials-state-start-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
--- 249,256 ----
    :group 'coq-proof-tree)
  
  (defcustom coq-proof-tree-existentials-state-start-regexp
! ;  "^(dependent evars:"
!   "(dependent evars:"
    "Coq instance of `proof-tree-existentials-state-start-regexp'."
    :type 'regexp
    :group 'coq-proof-tree)
***************
*** 1889,1897 ****
     coq-proof-tree-existentials-state-end-regexp
     coq-proof-tree-instantiated-existential-regexp))
  
! (defun coq-show-sequent-command (sequent-id)
    "Coq specific function for `proof-tree-show-sequent-command'."
!   (format "Show Goal \"%s\"." sequent-id))
  
  (defun coq-proof-tree-get-new-subgoals ()
    "Check for new subgoals and issue appropriate Show commands.
--- 1895,1907 ----
     coq-proof-tree-existentials-state-end-regexp
     coq-proof-tree-instantiated-existential-regexp))
  
! (defun coq-show-sequent-command (sequent-id sequent-num)
    "Coq specific function for `proof-tree-show-sequent-command'."
!   ;; (message "[CSSC] sequent-id=%s sequent-num=%s" sequent-id sequent-num)
!   (if (eq "" sequent-num)
!       (format "Show Goal \"%s\"." sequent-id)
!     (format "Show %s." sequent-num)))
! 
  
  (defun coq-proof-tree-get-new-subgoals ()
    "Check for new subgoals and issue appropriate Show commands.
***************
*** 1940,1951 ****
          (goto-char start)
          (while (proof-re-search-forward
                  coq-proof-tree-additional-subgoal-ID-regexp end t)
!           (let ((subgoal-id (match-string-no-properties 1)))
              (unless (gethash subgoal-id proof-tree-sequent-hash)
                ;; (message "CPTGNS new sequent %s found" subgoal-id)
                (setq proof-action-list
                      (cons (proof-shell-action-list-item
!                            (coq-show-sequent-command subgoal-id)
                             (proof-tree-make-show-goal-callback (car proof-info))
                             '(no-goals-display
                               no-response-display
--- 1950,1962 ----
          (goto-char start)
          (while (proof-re-search-forward
                  coq-proof-tree-additional-subgoal-ID-regexp end t)
!           (let ((subgoal-num (match-string-no-properties 1))
!                 (subgoal-id (match-string-no-properties 2)))
              (unless (gethash subgoal-id proof-tree-sequent-hash)
                ;; (message "CPTGNS new sequent %s found" subgoal-id)
                (setq proof-action-list
                      (cons (proof-shell-action-list-item
!                            (coq-show-sequent-command subgoal-id subgoal-num)
                             (proof-tree-make-show-goal-callback (car proof-info))
                             '(no-goals-display
                               no-response-display
